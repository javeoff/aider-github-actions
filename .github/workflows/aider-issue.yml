name: Aider Issue to PR workflow
on:
  workflow_call:
    inputs:
      base-branch:
        description: "Base branch to create PR against"
        required: true
        type: string
      chat-timeout:
        description: "Timeout for chat in minutes to prevent burning your credits"
        required: false
        type: number
        default: 10
      issue-number:
        description: "Issue number"
        required: true
        type: number
      model:
        description: "Model to use"
        required: false
        type: string
        default: "gpt-4-1106-preview"
    secrets:
      openai_api_key:
        description: "OpenAI API key"
        required: false
      anthropic_api_key:
        description: "Anthropic API Key"
        required: false
      gemini_api_key:
        description: "Gemini API Key"
        required: false
      groq_api_key:
        description: "Groq API Key"
        required: false
      cohere_api_key:
        description: "Cohere API Key"
        required: false
      deepseek_api_key:
        description: "Deepseek API Key"
        required: false
      openrouter_api_key:
        description: "OpenRouter API Key"
        required: false
      GH_TOKEN:
        description: "GitHub token with PR creation permissions"
        required: true

jobs:
  create-pull-request:
    permissions:
      issues: read
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create a new branch
        uses: actions/github-script@v7
        id: create_branch
        with:
          script: |
            const kebabCase = (str) => {
              return str
                  .toLowerCase()
                  .trim()
                  .replace(/[^\w\s-]/g, '') // Remove invalid characters
                  .replace(/\s+/g, '-')     // Replace spaces with dashes
                  .replace(/^-+|-+$/g, ''); // Remove leading/trailing dashes
            };

            const fixBranchUrl = (url) => url
              .replace(/\/git\/commits/, '/commit')
              .replace(/api.github.com\/repos/, 'github.com');

            // New branch should be based on the base-branch, so we need to get its SHA
            const baseBranch = await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: '${{ inputs.base-branch }}'
            });

            const { repo, owner } = context.repo;
            const branchName = 'feature/aider-' + kebabCase(context.payload.issue.title);
            const refName = `refs/heads/${branchName}`
            const refShortName = `heads/${branchName}`

            // Get existing ref if exists
            const existingRef = await github.rest.git.getRef({
              owner,
              repo,
              ref: refShortName
            }).catch(() => null);

            if (existingRef) {
              try {
                // If there's a branch for this ref, return the ref
                await github.rest.repos.getBranch({
                  owner,
                  repo,
                  branch: branchName
                });

                console.log(`Branch ${branchName} already exists with SHA ${existingRef.data.object.sha}`);
                console.log(`Branch URL: ${fixBranchUrl(existingRef.data.object.url)}`);

                return { ref: existingRef.data.ref }
              } catch (e) {
                console.error(e);
                // State recovery: If there's a ref but no branch, delete the ref and create a new branch
                // This can happen if the branch was deleted manually. The ref will still exist.
                console.log(`Branch ${branchName} doesn't exist, deleting ref ${refShortName}`);
                await github.rest.git.deleteRef({
                  owner,
                  repo,
                  ref: refShortName
                });
              }
            }

            // Create branch
            const result = await github.rest.git.createRef({
              owner,
              repo,
              ref: refName,
              sha: baseBranch.data.commit.sha
            });

            console.log(`Created branch ${branchName} with SHA ${result.data.object.sha}`);
            console.log(`Branch URL: ${fixBranchUrl(result.data.object.url)}`);

            return { ref: result.data.ref }

      - name: Update comment after branch creation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: ${{ inputs.issue-number }},
              body: `✅ Created branch: ${{ fromJson(steps.create_branch.outputs.result).ref }}`
            });

      - name: Create initial comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: ${{ inputs.issue-number }},
              body: '🚀 Starting Aider workflow...'
            });

      - name: Get issue
        uses: actions/github-script@v7
        id: get_issue
        with:
          script: |
            console.log('Fetching issue #${{ inputs.issue-number }}')
            const { repo, owner } = context.repo;
            const result = await github.rest.issues.get({
              owner,
              repo,
              issue_number: ${{ inputs.issue-number }}
            });
            console.log(`Fetched issue #${result.data.number}: ${result.data.title}`)

            return { 
              title: result.data.title.replace(/"/g, "'").replace(/`/g, '\\`'), 
              body: result.data?.body?.replace(/"/g, "'").replace(/`/g, '\\`'),
            };
      - name: Create prompt
        uses: actions/github-script@v7
        id: create_prompt
        with:
          result-encoding: string
          script: |
            const title = `${{ fromJson(steps.get_issue.outputs.result).title }}`;
            const body = `${{ fromJson(steps.get_issue.outputs.result).body }}`;

            return `Apply all necessary changes based on below issue description. \nIssue title: ${title}\nIssue description:\n${body}`;
      - name: Apply changes with Aider
        uses: mirrajabi/aider-github-action@main
        timeout-minutes: ${{ inputs.chat-timeout }}
        with:
          branch: ${{ fromJson(steps.create_branch.outputs.result).ref }}
          model: ${{ inputs.model }}
          aider_args: '--architect --yes --message "${{ steps.create_prompt.outputs.result }}"'
          # API keys
          openai_api_key: ${{ secrets.openai_api_key }}
          anthropic_api_key: ${{ secrets.anthropic_api_key }}
          cohere_api_key: ${{ secrets.cohere_api_key }}
          deepseek_api_key: ${{ secrets.deepseek_api_key }}
          gemini_api_key: ${{ secrets.gemini_api_key }}
          groq_api_key: ${{ secrets.groq_api_key }}
          openrouter_api_key: ${{ secrets.openrouter_api_key }}

      # - name: Check Aider output file
      #   run: |
      #     if [ ! -f .aider.chat.history.md ]; then
      #       echo "Error: Aider chat history file was not created"
      #       exit 1
      #     fi

      - name: Update comment with Aider output
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const fs = require('fs');
            let aiderOutput = '';
            try {
              const history = fs.readFileSync('.aider.chat.history.md', 'utf8');
              // Extract Aider's initial plan (before first code change)
              const initialPlan = history.split('```')[0];
              aiderOutput = initialPlan;
            } catch (error) {
              aiderOutput = 'Could not read Aider output';
            }
            
            const { repo, owner } = context.repo;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: ${{ inputs.issue-number }},
              body: `### 🤖 Aider's Plan:\n\n${aiderOutput}`
            });

      - name: Upload aider chat history
        uses: actions/upload-artifact@v3
        with:
          name: aider-chat-output
          path: ".aider.chat.history.md"

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const title = `${{ fromJson(steps.get_issue.outputs.result).title }}`;
            const body = `Fixes #${{ inputs.issue-number }}

            Changes made by Aider based on issue description.`;
            
            const pr = await github.rest.pulls.create({
              owner,
              repo,
              title,
              body,
              head: '${{ fromJson(steps.create_branch.outputs.result).ref }}'.replace('refs/heads/', ''),
              base: '${{ inputs.base-branch }}'
            });
            
            // Add aider label to the PR
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pr.data.number,
              labels: ['aider']
            });
            
            console.log(`Created PR #${pr.data.number}: ${pr.data.html_url}`);

      - name: Final status update
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: ${{ inputs.issue-number }},
              body: `✅ Workflow completed successfully!\nPull Request has been created.`
            });
